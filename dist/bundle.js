/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Main.js":
/*!*********************!*\
  !*** ./src/Main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var _scenes_Level1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scenes/Level1.js */ \"./src/scenes/Level1.js\");\n/* harmony import */ var _scenes_Level10_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scenes/Level10.js */ \"./src/scenes/Level10.js\");\n/* harmony import */ var _scenes_Level11_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scenes/Level11.js */ \"./src/scenes/Level11.js\");\n/* harmony import */ var _scenes_Level12_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scenes/Level12.js */ \"./src/scenes/Level12.js\");\n/* harmony import */ var _scenes_Level13_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scenes/Level13.js */ \"./src/scenes/Level13.js\");\n/* harmony import */ var _scenes_Level14_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scenes/Level14.js */ \"./src/scenes/Level14.js\");\n/* harmony import */ var _scenes_Level15_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scenes/Level15.js */ \"./src/scenes/Level15.js\");\n/* harmony import */ var _scenes_Level16_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scenes/Level16.js */ \"./src/scenes/Level16.js\");\n/* harmony import */ var _scenes_Level17_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./scenes/Level17.js */ \"./src/scenes/Level17.js\");\n/* harmony import */ var _scenes_Level18_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scenes/Level18.js */ \"./src/scenes/Level18.js\");\n/* harmony import */ var _scenes_Level19_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./scenes/Level19.js */ \"./src/scenes/Level19.js\");\n/* harmony import */ var _scenes_Level2_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./scenes/Level2.js */ \"./src/scenes/Level2.js\");\n/* harmony import */ var _scenes_Level20_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./scenes/Level20.js */ \"./src/scenes/Level20.js\");\n/* harmony import */ var _scenes_Level3_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./scenes/Level3.js */ \"./src/scenes/Level3.js\");\n/* harmony import */ var _scenes_Level4_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./scenes/Level4.js */ \"./src/scenes/Level4.js\");\n/* harmony import */ var _scenes_Level5_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./scenes/Level5.js */ \"./src/scenes/Level5.js\");\n/* harmony import */ var _scenes_Level6_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./scenes/Level6.js */ \"./src/scenes/Level6.js\");\n/* harmony import */ var _scenes_Level7_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./scenes/Level7.js */ \"./src/scenes/Level7.js\");\n/* harmony import */ var _scenes_Level8_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./scenes/Level8.js */ \"./src/scenes/Level8.js\");\n/* harmony import */ var _scenes_Level9_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./scenes/Level9.js */ \"./src/scenes/Level9.js\");\n/* harmony import */ var _scenes_LevelSelection_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./scenes/LevelSelection.js */ \"./src/scenes/LevelSelection.js\");\n/* harmony import */ var _scenes_LoadingScene_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./scenes/LoadingScene.js */ \"./src/scenes/LoadingScene.js\");\n/* harmony import */ var _scenes_MainMenu_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./scenes/MainMenu.js */ \"./src/scenes/MainMenu.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst config = {\r\n    type: Phaser.AUTO,\r\n    width: 864,\r\n    height: 1536,\r\n    parent: \"game\",\r\n    backgroundColor: '#EEEEEE',\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    },\r\n    scene: [\r\n        _scenes_LoadingScene_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"],\r\n        _scenes_MainMenu_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"],\r\n        _scenes_LevelSelection_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\r\n        _scenes_Level1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\r\n        _scenes_Level2_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\r\n        _scenes_Level3_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\r\n        _scenes_Level4_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\r\n        _scenes_Level5_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\r\n        _scenes_Level6_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\r\n        _scenes_Level7_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\r\n        _scenes_Level8_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\r\n        _scenes_Level9_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\r\n        _scenes_Level10_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\r\n        _scenes_Level11_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\r\n        _scenes_Level12_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\r\n        _scenes_Level13_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\r\n        _scenes_Level14_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\r\n        _scenes_Level15_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\r\n        _scenes_Level16_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\r\n        _scenes_Level17_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\r\n        _scenes_Level18_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\r\n        _scenes_Level19_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\r\n        _scenes_Level20_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]\r\n    ]\r\n}\r\n\r\nconst game = new Phaser.Game(config);\n\n//# sourceURL=webpack://tileswitch/./src/Main.js?");

/***/ }),

/***/ "./src/scenes/Level1.js":
/*!******************************!*\
  !*** ./src/scenes/Level1.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level1)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level1 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level1\");\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 5;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 2, y: 4 }, { x: 6, y: 7 });\r\n        this.addColorTile(3, 5, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(5, 5, \"tile-yellow\");\r\n        this.addPattern([\"tile-blue\", \"tile-yellow\", \"tile-green\"]);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level1.js?");

/***/ }),

/***/ "./src/scenes/Level10.js":
/*!*******************************!*\
  !*** ./src/scenes/Level10.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level10)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level10 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level10\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 6;\r\n        this.bronzeTrophy = 10;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 4, y: 0 }, { x: 4, y: 12 });\r\n        this.removeEmptyTiles({ x: 4, y: 2 }, { x: 4, y: 2 });\r\n        this.removeEmptyTiles({ x: 4, y: 5 }, { x: 4, y: 5 });\r\n        this.addColorTile(4, 9, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(4, 7, \"tile-blue\");\r\n        this.addColorTile(4, 8, \"tile-red\");\r\n        this.addColorTile(4, 9, \"tile-green\");\r\n        this.addColorTile(4, 10, \"tile-yellow\");\r\n        this.addColorTile(4, 11, \"tile-blue\");\r\n\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-blue\", \"tile-red\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 20, -60, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-green\", \"tile-blue\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 95, -60, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"hover-outline\", type: \"spacing\", quantity: 5 }, \"tile-yellow\", \"tile-green\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 171.5, -60, 0.5);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level10.js?");

/***/ }),

/***/ "./src/scenes/Level11.js":
/*!*******************************!*\
  !*** ./src/scenes/Level11.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level11)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level11 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level11\");\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 5;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 2, y: 5 }, { x: 6, y: 5 });\r\n        this.addColorTile(4, 5, \"tile-red\");\r\n        this.addColorTile(2, 5, \"tile-blue\");\r\n        this.addPattern([{ texture: \"tile-joker\", type: \"joker\" }, \"tile-blue\"], 50, 0, 1);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level11.js?");

/***/ }),

/***/ "./src/scenes/Level12.js":
/*!*******************************!*\
  !*** ./src/scenes/Level12.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level12)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level12 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level12\");\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 5;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 3, y: 6 }, { x: 6, y: 6 });\r\n        this.drawEmptyTiles({ x: 3, y: 3 }, { x: 5, y: 4 });\r\n        this.addColorTile(5, 3, \"tile-blue\");\r\n        this.addColorTile(4, 4, \"tile-green\");\r\n\r\n        this.addPattern([{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-blue\", { texture: \"tile-joker\", type: \"joker\" }], 30, -40, 0.7);\r\n        this.addPattern([\"tile-blue\", \"tile-green\", { texture: \"hover-outline\", type: \"spacing\", quantity: 2 }], 30, 40, 0.7);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level12.js?");

/***/ }),

/***/ "./src/scenes/Level13.js":
/*!*******************************!*\
  !*** ./src/scenes/Level13.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level13)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level13 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level13\");\r\n        this.goldTrophy = 3;\r\n        this.bronzeTrophy = 7;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 1, y: 4 }, { x: 7, y: 7 });\r\n        this.removeEmptyTiles({ x: 6, y: 4 }, { x: 7, y: 4 });\r\n        this.removeEmptyTiles({ x: 2, y: 4 }, { x: 2, y: 4 });\r\n        this.addColorTile(5, 4, \"tile-blue\");\r\n        this.addColorTile(4, 5, \"tile-red\");\r\n        this.addColorTile(4, 6, \"tile-yellow\");\r\n\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-yellow\", \"tile-red\", \"tile-blue\"], 40, -45, 0.4);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-blue\"], direction: \"vertical\" }, 20, 10, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"hover-outline\", type: \"spacing\", quantity: 1 }, \"tile-yellow\"], direction: \"vertical\" }, 100, 10, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-red\"], direction: \"vertical\" }, 180, 10, 0.5);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level13.js?");

/***/ }),

/***/ "./src/scenes/Level14.js":
/*!*******************************!*\
  !*** ./src/scenes/Level14.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level14)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level14 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level14\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 4;\r\n        this.bronzeTrophy = 10;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 1, y: 4 }, { x: 7, y: 7 });\r\n        this.removeEmptyTiles({ x: 6, y: 4 }, { x: 7, y: 4 });\r\n        this.removeEmptyTiles({ x: 2, y: 4 }, { x: 2, y: 4 });\r\n        this.addColorTile(5, 4, \"tile-blue\");\r\n        this.addColorTile(4, 5, \"tile-red\");\r\n        this.addColorTile(4, 6, \"tile-yellow\");\r\n        this.addColorTile(4, 7, \"tile-green\");\r\n\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-green\", \"tile-yellow\"], 100, -45, 0.4);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-joker\", type: \"joker\" }, \"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], direction: \"vertical\" }, 20, -40, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"hover-outline\", type: \"spacing\", quantity: 1 }, \"tile-yellow\"], direction: \"vertical\" }, 100, 10, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-red\"], direction: \"vertical\" }, 180, 10, 0.5);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level14.js?");

/***/ }),

/***/ "./src/scenes/Level15.js":
/*!*******************************!*\
  !*** ./src/scenes/Level15.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level15)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level15 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level15\");\r\n        this.goldTrophy = 4;\r\n        this.bronzeTrophy = 7;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 1, y: 4 }, { x: 7, y: 6 });\r\n        this.removeEmptyTiles({ x: 6, y: 4 }, { x: 7, y: 4 });\r\n        this.removeEmptyTiles({ x: 2, y: 4 }, { x: 2, y: 4 });\r\n        this.removeEmptyTiles({ x: 3, y: 6 }, { x: 3, y: 6 });\r\n        this.removeEmptyTiles({ x: 4, y: 6 }, { x: 4, y: 6 });\r\n        this.removeEmptyTiles({ x: 2, y: 5 }, { x: 2, y: 5 });\r\n        this.removeEmptyTiles({ x: 5, y: 6 }, { x: 5, y: 6 });\r\n        this.addColorTile(5, 4, \"tile-blue\");\r\n        this.addColorTile(4, 5, \"tile-red\");\r\n        this.addColorTile(7, 6, \"tile-yellow\");\r\n        this.addColorTile(1, 6, \"tile-green\");\r\n\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-green\", \"tile-yellow\"], 100, -45, 0.4);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-joker\", type: \"joker\" }, \"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], direction: \"vertical\" }, 20, -40, 0.5);\r\n        this.addVerticalPattern({ array: [\"tile-yellow\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], direction: \"vertical\" }, 100, 10, 0.5);\r\n        this.addVerticalPattern({ array: [\"tile-green\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 180, 10, 0.5);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level15.js?");

/***/ }),

/***/ "./src/scenes/Level16.js":
/*!*******************************!*\
  !*** ./src/scenes/Level16.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level16)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level16 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level16\");\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 6;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 1, y: 5 }, { x: 6, y: 7 })\r\n        this.addColorTile(2, 6, \"tile-red\");\r\n        this.addColorTile(3, 6, \"tile-rock\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(5, 6, \"tile-yellow\");\r\n        this.addPattern([\"tile-red\", \"tile-yellow\", \"tile-green\"]);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level16.js?");

/***/ }),

/***/ "./src/scenes/Level17.js":
/*!*******************************!*\
  !*** ./src/scenes/Level17.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level17)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level17 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level17\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 8;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 1, y: 5 }, { x: 7, y: 7 })\r\n        this.addColorTile(2, 6, \"tile-red\");\r\n        this.addColorTile(2, 7, \"tile-rock\");\r\n        this.addColorTile(1, 7, \"tile-rock\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(5, 6, \"tile-yellow\");\r\n        this.addPattern([\"tile-yellow\", { texture: \"tile-joker\", type: \"joker\" }], 100, -45, 0.4);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-joker\", type: \"joker\" }, \"tile-red\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], direction: \"vertical\" }, 20, -40, 0.5);\r\n        this.addVerticalPattern({ array: [\"tile-yellow\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], direction: \"vertical\" }, 100, 10, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-green\"], direction: \"vertical\" }, 180, 10, 0.5);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level17.js?");

/***/ }),

/***/ "./src/scenes/Level18.js":
/*!*******************************!*\
  !*** ./src/scenes/Level18.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level18)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level18 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level18\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 10;\r\n        this.bronzeTrophy = 15;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 4, y: 0 }, { x: 4, y: 12 });\r\n        this.removeEmptyTiles({ x: 4, y: 2 }, { x: 4, y: 2 });\r\n        this.removeEmptyTiles({ x: 4, y: 5 }, { x: 4, y: 5 });\r\n        this.addColorTile(4, 9, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(4, 7, \"tile-blue\");\r\n        this.addColorTile(4, 8, \"tile-red\");\r\n        this.addColorTile(4, 9, \"tile-green\");\r\n        this.addColorTile(4, 10, \"tile-yellow\");\r\n        this.addColorTile(4, 11, \"tile-blue\");\r\n        this.addColorTile(4, 0, \"tile-rock\");\r\n        this.addColorTile(4, 1, \"tile-rock\");\r\n        this.addColorTile(4, 3, \"tile-rock\");\r\n        this.addColorTile(4, 4, \"tile-rock\");\r\n\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-blue\", \"tile-red\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 20, -60, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-green\", \"tile-blue\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 95, -60, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"hover-outline\", type: \"spacing\", quantity: 1 }, \"tile-yellow\", \"tile-green\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 171.5, -60, 0.5);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level18.js?");

/***/ }),

/***/ "./src/scenes/Level19.js":
/*!*******************************!*\
  !*** ./src/scenes/Level19.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level19)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level19 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level19\");\r\n        this.goldTrophy = 4;\r\n        this.bronzeTrophy = 7;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 0, y: 6 }, { x: 8, y: 12 });\r\n        this.addColorTile(4, 9, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(4, 7, \"tile-blue\");\r\n        this.addColorTile(4, 8, \"tile-red\");\r\n        this.addColorTile(4, 9, \"tile-green\");\r\n        this.addColorTile(4, 11, \"tile-blue\");\r\n\r\n        this.addVerticalPattern({ array: [\"tile-red\", \"tile-blue\", \"tile-green\"], direction: \"vertical\" }, -10, -50, 0.5);\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-green\", { texture: \"tile-joker\", type: \"joker\" }, { texture: \"hover-outline\", type: \"spacing\", quantity: 5 }], 65, 0, 0.5);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level19.js?");

/***/ }),

/***/ "./src/scenes/Level2.js":
/*!******************************!*\
  !*** ./src/scenes/Level2.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level2)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level2 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level2\");\r\n        this.goldTrophy = 3;\r\n        this.bronzeTrophy = 6;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 0, y: 0 }, { x: 2, y: 2 });\r\n        this.drawEmptyTiles({ x: 7, y: 5 }, { x: 8, y: 6 });\r\n        this.drawEmptyTiles({ x: 4, y: 9 }, { x: 5, y: 10 });\r\n        this.addColorTile(0, 0, \"tile-blue\");\r\n        this.addColorTile(4, 9, \"tile-green\");\r\n        this.addColorTile(8, 5, \"tile-yellow\");\r\n        this.addPattern([\"tile-green\", \"tile-blue\", \"tile-yellow\"]);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level2.js?");

/***/ }),

/***/ "./src/scenes/Level20.js":
/*!*******************************!*\
  !*** ./src/scenes/Level20.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level20)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level20 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level20\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 6;\r\n        this.bronzeTrophy = 13;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTilesAllBoard();\r\n        this.removeEmptyTiles({ x: 1, y: 1 }, { x: 1, y: 1 });\r\n        this.removeEmptyTiles({ x: 7, y: 1 }, { x: 7, y: 1 });\r\n        this.removeEmptyTiles({ x: 1, y: 11 }, { x: 1, y: 11 });\r\n        this.removeEmptyTiles({ x: 7, y: 11 }, { x: 7, y: 11 });\r\n        this.removeEmptyTiles({ x: 4, y: 4 }, { x: 4, y: 4 });\r\n        this.addColorTile(4, 9, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n        this.addColorTile(4, 7, \"tile-blue\");\r\n        this.addColorTile(4, 8, \"tile-red\");\r\n        this.addColorTile(4, 9, \"tile-green\");\r\n        this.addColorTile(4, 11, \"tile-blue\");\r\n\r\n        this.addColorTile(1, 0, \"tile-rock\");\r\n        this.addColorTile(7, 0, \"tile-rock\");\r\n        this.addColorTile(7, 12, \"tile-rock\");\r\n        this.addColorTile(1, 12, \"tile-rock\");\r\n\r\n        this.addVerticalPattern({ array: [{ texture: \"tile-black\", type: \"emptySpace\" }, \"tile-blue\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, -10, -50, 0.5);\r\n        this.addVerticalPattern({ array: [\"tile-green\", { texture: \"hover-outline\", type: \"spacing\", quantity: 8 }, { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 45, -50, 0.5);\r\n        this.addVerticalPattern({ array: [{ texture: \"hover-outline\", type: \"spacing\", quantity: 3 }, \"tile-green\", { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 100, -50, 0.5);\r\n        this.addVerticalPattern({ array: [\"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 8 }, { texture: \"tile-black\", type: \"emptySpace\" }], direction: \"vertical\" }, 155, -50, 0.5);\r\n        this.addVerticalPattern({ array: [ \"tile-green\", { texture: \"tile-black\", type: \"emptySpace\" }, \"tile-red\"], direction: \"vertical\" }, 210, -50, 0.5);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level20.js?");

/***/ }),

/***/ "./src/scenes/Level3.js":
/*!******************************!*\
  !*** ./src/scenes/Level3.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level3)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level3 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level3\");\r\n        this.goldTrophy = 4;\r\n        this.bronzeTrophy = 7;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 2, y: 2 }, { x: 5, y: 4 });\r\n        this.drawEmptyTiles({ x: 0, y: 6 }, { x: 8, y: 8 });\r\n        this.addColorTile(0, 6, \"tile-blue\");\r\n        this.addColorTile(8, 7, \"tile-green\");\r\n        this.addColorTile(2, 8, \"tile-yellow\");\r\n\r\n        this.addColorTile(2, 2, \"tile-green\");\r\n        this.addColorTile(5, 3, \"tile-blue\");\r\n        this.addColorTile(4, 4, \"tile-yellow\");\r\n        \r\n        this.addPattern([\"tile-green\", \"tile-blue\", \"tile-yellow\"], 30, -40, 0.7);\r\n        this.addPattern([\"tile-blue\", \"tile-green\", \"tile-yellow\"], 30, 40, 0.7);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level3.js?");

/***/ }),

/***/ "./src/scenes/Level4.js":
/*!******************************!*\
  !*** ./src/scenes/Level4.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level4)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level4 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level4\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 7;\r\n        this.bronzeTrophy = 13;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 0, y: 2 }, { x: 3, y: 3 });\r\n        this.drawEmptyTiles({ x: 7, y: 6 }, { x: 8, y: 9 });\r\n        this.addColorTile(8, 6, \"tile-blue\");\r\n        this.addColorTile(8, 7, \"tile-green\");\r\n        this.addColorTile(8, 8, \"tile-yellow\");\r\n        this.addColorTile(8, 9, \"tile-red\");\r\n\r\n        this.addColorTile(2, 2, \"tile-green\");\r\n        this.addColorTile(3, 2, \"tile-blue\");\r\n        this.addColorTile(3, 3, \"tile-yellow\");\r\n        this.addColorTile(0, 3, \"tile-red\");\r\n\r\n        this.addPattern([\"tile-green\", \"tile-red\", \"tile-blue\", \"tile-yellow\"], 10, -40, 0.6);\r\n        this.addPattern([\"tile-blue\", \"tile-green\", \"tile-yellow\", \"tile-red\"], 10, 40, 0.6);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level4.js?");

/***/ }),

/***/ "./src/scenes/Level5.js":
/*!******************************!*\
  !*** ./src/scenes/Level5.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level5)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level5 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level5\");\r\n        this.goldTrophy = 1;\r\n        this.bronzeTrophy = 3;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 3, y: 4 }, { x: 4, y: 4 });\r\n        this.drawEmptyTiles({ x: 3, y: 5 }, { x: 5, y: 5 });\r\n        this.addColorTile(3, 4, \"tile-blue\");\r\n        this.addPattern([\"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 2 }], 50, 0, 1);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level5.js?");

/***/ }),

/***/ "./src/scenes/Level6.js":
/*!******************************!*\
  !*** ./src/scenes/Level6.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level6)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level6 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level6\");\r\n        this.goldTrophy = 2;\r\n        this.bronzeTrophy = 5;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 3, y: 3 }, { x: 5, y: 7 });\r\n        this.drawEmptyTiles({ x: 1, y: 7 }, { x: 4, y: 7 });\r\n        this.drawEmptyTiles({ x: 1, y: 4 }, { x: 4, y: 4 });\r\n        this.removeEmptyTiles({ x: 5, y: 4 }, { x: 5, y: 4 });\r\n        this.addColorTile(4, 4, \"tile-blue\");\r\n        this.addColorTile(4, 6, \"tile-green\");\r\n\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 2 }], 40, -40, 0.6);\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-green\", { texture: \"hover-outline\", type: \"spacing\", quantity: 1 }], 40, 40, 0.6);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level6.js?");

/***/ }),

/***/ "./src/scenes/Level7.js":
/*!******************************!*\
  !*** ./src/scenes/Level7.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level7)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level7 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level7\");\r\n        this.goldTrophy = 1;\r\n        this.bronzeTrophy = 4;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 3, y: 4 }, { x: 3, y: 4 });\r\n        this.drawEmptyTiles({ x: 4, y: 4 }, { x: 4, y: 4 });\r\n        this.drawEmptyTiles({ x: 4, y: 5 }, { x: 4, y: 5 });\r\n        this.drawEmptyTiles({ x: 3, y: 7 }, { x: 3, y: 7 });\r\n        this.drawEmptyTiles({ x: 4, y: 7 }, { x: 4, y: 7 });\r\n        this.drawEmptyTiles({ x: 4, y: 6 }, { x: 4, y: 6 });\r\n\r\n        this.addColorTile(3, 4, \"tile-blue\");\r\n        this.addColorTile(4, 4, \"tile-green\");\r\n        this.addColorTile(4, 6, \"tile-blue\");\r\n\r\n        this.addPattern([\"tile-blue\", \"tile-green\"], 20, -40, 0.6);\r\n        this.addVerticalPattern({ array: [\"tile-green\", \"tile-blue\"], direction: \"vertical\" }, 170, -40, 0.6);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level7.js?");

/***/ }),

/***/ "./src/scenes/Level8.js":
/*!******************************!*\
  !*** ./src/scenes/Level8.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level8)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level8 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level8\");\r\n        this.hearts2 = [];\r\n        this.goldTrophy = 4;\r\n        this.bronzeTrophy = 8;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 0, y: 4 }, { x: 8, y: 6 });\r\n        this.removeEmptyTiles({ x: 8, y: 5 }, { x: 8, y: 5});\r\n        this.addColorTile(4, 4, \"tile-blue\");\r\n        this.addColorTile(5, 5, \"tile-green\");\r\n        this.addColorTile(6, 6, \"tile-red\");\r\n        this.addColorTile(8, 6, \"tile-yellow\");\r\n\r\n        this.addPattern([{ texture: \"hover-outline\", type: \"spacing\", quantity: 2 }, \"tile-yellow\", \"tile-red\", \"tile-blue\", { texture: \"hover-outline\", type: \"spacing\", quantity: 4 }], -15, -40, 0.4);\r\n        this.addVerticalPattern({ array: [\"tile-green\", \"tile-red\"], direction: \"vertical\" }, 195, -40, 0.5);\r\n\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level8.js?");

/***/ }),

/***/ "./src/scenes/Level9.js":
/*!******************************!*\
  !*** ./src/scenes/Level9.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Level9)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass Level9 extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"Level9\");\r\n        this.goldTrophy = 1;\r\n        this.bronzeTrophy = 3;\r\n    }\r\n\r\n    create() {\r\n        super.create();\r\n        this.drawEmptyTiles({ x: 2, y: 5 }, { x: 6, y: 5});\r\n        this.addColorTile(4, 5, \"tile-blue\");\r\n        this.addPattern([{ texture: \"tile-black\", type: \"emptySpace\"}, \"tile-blue\"], 50, 0, 1);\r\n        this.verifyTilesInPattern();\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/Level9.js?");

/***/ }),

/***/ "./src/scenes/LevelScene.js":
/*!**********************************!*\
  !*** ./src/scenes/LevelScene.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LevelScene)\n/* harmony export */ });\nclass LevelScene extends Phaser.Scene {\r\n    constructor(sceneName) {\r\n        super({\r\n            key: sceneName,\r\n        });\r\n    }\r\n\r\n    setTileCorrect(tileFromTopPanel, patternIndex) {\r\n        if (this.tileContainer[patternIndex].list.find(object => object.texture.key === \"tile-correct\" && object.x == tileFromTopPanel.x && object.y == tileFromTopPanel.y)) {\r\n            return;\r\n        }\r\n        let correctTile = this.add.sprite(tileFromTopPanel.x, tileFromTopPanel.y, \"tile-correct\").setDepth(6)\r\n        this.tileContainer[patternIndex].add(correctTile);\r\n        correctTile.play(\"tile-correct-dashed\");\r\n    }\r\n\r\n    destroyAllCorrectTilesInContainer() {\r\n        for (let [patternIndex, pattern] of this.tilesPattern.entries()) {\r\n            let correctTiles = this.tileContainer[patternIndex].list.filter(object => object.texture.key == \"tile-correct\"\r\n            );\r\n            correctTiles.forEach(tile => tile.destroy());\r\n        }\r\n    }\r\n\r\n    verifyTilesInPattern() {\r\n        this.destroyAllCorrectTilesInContainer();\r\n\r\n        let allPatternsTruthy = true;\r\n        for (let [patternIndex, pattern] of this.tilesPattern.entries()) {\r\n            let direction = pattern.direction;\r\n            if (pattern.array) {\r\n                direction = pattern.direction;\r\n                pattern = pattern.array;\r\n            }\r\n            if (!direction) {\r\n                direction = \"horizontal\"\r\n            }\r\n            let i = 0;\r\n            let patternTruthy = false;\r\n            let similarTiles = this.colorTiles.filter(object => object.key === pattern[i]);\r\n            for (const similarTile of similarTiles) {\r\n                let X = similarTile.x;\r\n                let Y = similarTile.y;\r\n                if (this.recursive(pattern, i, X, Y, patternIndex, direction)) {\r\n                    patternTruthy = true;\r\n                }\r\n            }\r\n            for (const [j, element] of pattern.entries()) {\r\n                if (j > 0 && element.type != \"spacing\" && pattern[j - 1].type == \"spacing\") {\r\n                    let similarTiles = this.colorTiles.filter(object => object.key === element);\r\n                    for (const similarTile of similarTiles) {\r\n                        let X = similarTile.x;\r\n                        let Y = similarTile.y;\r\n                        if (direction === \"horizontal\") {\r\n                            X = similarTile.x - pattern[j - 1].quantity;\r\n                        } else if (direction === \"vertical\") {\r\n                            Y = similarTile.y - pattern[j - 1].quantity;\r\n                        }\r\n                        if (X < 0)\r\n                            X = 0;\r\n                        if (X > this.numTilesH - 1)\r\n                            X = this.numTilesH - 1;\r\n                        if (Y < 0)\r\n                            Y = 0;\r\n                        if (Y > this.numTilesV - 1)\r\n                            Y = this.numTilesV - 1;\r\n                        if (this.recursive(pattern, i, X, Y, patternIndex, direction)) {\r\n                            patternTruthy = true;\r\n                        }\r\n                    }\r\n                } else if (j > 0 && element.type != \"emptySpace\" && pattern[j - 1].type == \"emptySpace\") {\r\n                    let similarTiles = this.colorTiles.filter(object => object.key === element);\r\n                    for (const similarTile of similarTiles) {\r\n                        let X = similarTile.x;\r\n                        let Y = similarTile.y;\r\n                        if (direction === \"horizontal\") {\r\n                            X--;\r\n                        } else if (direction === \"vertical\") {\r\n                            Y--;\r\n                        }\r\n                        if (this.recursive(pattern, i, X, Y, patternIndex, direction)) {\r\n                            patternTruthy = true;\r\n                        }\r\n                    }\r\n                } else if (j > 0 && element.type != \"joker\" && pattern[j - 1].type == \"joker\") {\r\n                    let similarTiles = this.colorTiles.filter(object => object.key === element);\r\n                    for (const similarTile of similarTiles) {\r\n                        let X = similarTile.x;\r\n                        let Y = similarTile.y;\r\n                        if (direction === \"horizontal\") {\r\n                            X--;\r\n                        } else if (direction === \"vertical\") {\r\n                            Y--;\r\n                        }\r\n                        if (this.recursive(pattern, i, X, Y, patternIndex, direction)) {\r\n                            patternTruthy = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (patternTruthy == false) {\r\n                allPatternsTruthy = false;\r\n            }\r\n        }\r\n        if (allPatternsTruthy) {\r\n            const levelNumber = parseInt(this.constructor.name.replace(/(\\D+)(\\d+)/, \"$2\"));\r\n            const lastLevel = localStorage.getItem('tileswitch_lastLevel')\r\n                ? parseInt(localStorage.getItem('tileswitch_lastLevel'))\r\n                : 1;\r\n            const nextLevelNumber = levelNumber + 1;\r\n            const bestScoreKey = `tileswitch_level_${levelNumber}_bestScore`;\r\n            const bestScore = localStorage.getItem(bestScoreKey)\r\n                ? parseInt(localStorage.getItem(bestScoreKey))\r\n                : 9999;\r\n            const currentScore = this.moves; // Assume this.getScore() returns the player's score for the level\r\n\r\n            // Update the best score if the current score is higher\r\n            if (currentScore < bestScore) {\r\n                localStorage.setItem(bestScoreKey, currentScore);\r\n            }\r\n\r\n            // Update the last level if the new level is higher\r\n            if (nextLevelNumber > lastLevel) {\r\n                localStorage.setItem('tileswitch_lastLevel', nextLevelNumber);\r\n            }\r\n\r\n            this.showLevelFinalization(nextLevelNumber);\r\n\r\n        }\r\n        return allPatternsTruthy;\r\n    }\r\n\r\n    showLevelFinalization(nextLevelNumber) {\r\n        this.sound.add('winlevel').play({ volume: 1.0 });\r\n\r\n        this.levelFinalization = true;\r\n        this.fadeRect = this.add.rectangle(0, 0, this.cameras.main.width, this.cameras.main.height, 0x000000).setAlpha(0.7);\r\n        this.fadeRect.setOrigin(0, 0);\r\n        this.fadeRect.setDepth(1000); // Ensure the rectangle is on top\r\n\r\n        this.add.image(this.cameras.main.centerX, this.cameras.main.centerY - 200, \"levelfinalizationpanel\")\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5)\r\n\r\n        const showTrophy = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY - 330, this.currentTrophy.texture.key)\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5).setScale(3);\r\n\r\n\r\n        const levelSelectionButton = this.add.image(this.cameras.main.centerX - 220, this.cameras.main.centerY - 100, \"levels\")\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5)\r\n            .setScale(1)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                this.scene.start('LevelSelection'); // Replace 'HomeScene' with your actual scene key\r\n            });\r\n\r\n        const restartButton = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY - 100, \"restart-button\")\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5)\r\n            .setScale(1)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                this.scene.restart(); // Restarts the current scene\r\n            });\r\n\r\n\r\n        const nextLevel = this.add.image(this.cameras.main.centerX + 210, this.cameras.main.centerY - 100, \"next-level\")\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5)\r\n            .setScale(1)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                if (nextLevelNumber > 20) {\r\n                    this.scene.start(\"MainMenu\");\r\n                } else {\r\n                    this.scene.start(\"Level\" + (nextLevelNumber));\r\n                }\r\n            });\r\n    }\r\n\r\n    recursive(pattern, i, X, Y, patternIndex, direction = \"horizontal\") {\r\n        let similarTiles = this.colorTiles.filter(object => object.key === pattern[i]);\r\n        if (pattern[i].type == \"spacing\") {\r\n            if (X > -1 && X < this.numTilesH && Y > -1 && Y < this.numTilesV && this.tiles[X][Y] && this.tiles[X][Y].texture.key === \"hover-outline\") {\r\n                if (direction == \"horizontal\") {\r\n                    X++;\r\n                } else if (direction == \"vertical\") {\r\n                    Y++;\r\n                }\r\n                if (!pattern[i].quantityWalked)\r\n                    pattern[i].quantityWalked = 1;\r\n                else\r\n                    pattern[i].quantityWalked++;\r\n                if (pattern[i].quantityWalked == pattern[i].quantity) {\r\n                    pattern[i].quantityWalked = null;\r\n                    let tileFromTopPanel = this.tileContainer[patternIndex].list.find((object, index) => index >= i && object.texture.key === \"hover-outline\");\r\n                    this.setTileCorrect(tileFromTopPanel, patternIndex);\r\n                    if (\"hover-outline\" == pattern[pattern.length - 1].texture && i == pattern.length - 1) {\r\n                        return true;\r\n                    } else {\r\n                        if (this.recursive(pattern, i + 1, X, Y, patternIndex, direction)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (this.recursive(pattern, i, X, Y, patternIndex, direction)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            } else {\r\n                if (pattern[i].quantityWalked != pattern[i].quantity) {\r\n                    pattern[i].quantityWalked = null;\r\n                }\r\n            }\r\n        } else if (pattern[i].type == \"emptySpace\") {\r\n            if ((X == -1 && direction == \"horizontal\") || (Y == -1 && direction == \"vertical\") || !this.tiles[X][Y]) {\r\n                let tileFromTopPanel = this.tileContainer[patternIndex].list.find((object, index) => index >= i && object.texture.key === \"tile-black\");\r\n                this.setTileCorrect(tileFromTopPanel, patternIndex);\r\n                if (direction == \"horizontal\") {\r\n                    X++;\r\n                } else if (direction == \"vertical\") {\r\n                    Y++;\r\n                }\r\n                if (\"tile-black\" == pattern[pattern.length - 1].texture && i == pattern.length - 1) {\r\n                    return true;\r\n                } else {\r\n                    if (this.recursive(pattern, i + 1, X, Y, patternIndex, direction)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        } else if (pattern[i].type == \"joker\") {\r\n            if (this.tiles[X][Y] && (this.tiles[X][Y].texture.key == \"tile-green\" || this.tiles[X][Y].texture.key == \"tile-red\" || this.tiles[X][Y].texture.key == \"tile-yellow\" || this.tiles[X][Y].texture.key == \"tile-blue\")) {\r\n                let tileFromTopPanel = this.tileContainer[patternIndex].list.find((object, index) => index >= i && object.texture.key === \"tile-joker\");\r\n                this.setTileCorrect(tileFromTopPanel, patternIndex);\r\n                if (direction == \"horizontal\") {\r\n                    X++;\r\n                } else if (direction == \"vertical\") {\r\n                    Y++;\r\n                }\r\n                if (\"tile-joker\" == pattern[pattern.length - 1].texture && i == pattern.length - 1) {\r\n                    return true;\r\n                } else {\r\n                    if (this.recursive(pattern, i + 1, X, Y, patternIndex, direction)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (const similarTile of similarTiles) {\r\n                if (X == similarTile.x && Y == similarTile.y) {\r\n                    let tileFromTopPanel = this.tileContainer[patternIndex].list.find(object => object.texture.key === similarTile.key);\r\n                    this.setTileCorrect(tileFromTopPanel, patternIndex);\r\n                    if (similarTile.key == pattern[pattern.length - 1]) {\r\n                        return true;\r\n                    } else {\r\n                        if (direction == \"horizontal\") {\r\n                            X++;\r\n                        } else if (direction == \"vertical\") {\r\n                            Y++;\r\n                        }\r\n                        if (this.recursive(pattern, i + 1, X, Y, patternIndex, direction)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    create() {\r\n        this.levelFinalization = false;\r\n        this.hearts = [];\r\n        this.best = 0;\r\n        this.moves = 0;\r\n        this.tilesPattern = [];\r\n        this.tileContainer = [];\r\n        this.tiles = [];\r\n        this.colorTiles = [];\r\n        this.firstTile = null; // Track the first tile selected\r\n        this.secondTile = null; // Track the second tile selected\r\n        this.fadeRect = this.add.rectangle(0, 0, this.cameras.main.width, this.cameras.main.height, 0x000000);\r\n        this.fadeRect.setOrigin(0, 0);\r\n        this.fadeRect.setDepth(1000); // Ensure the rectangle is on top\r\n        this.ctrlKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.CTRL);\r\n        this.add.image(0, 0, \"top-panel\").setOrigin(0, 0);\r\n        const levelName = this.constructor.name.replace(/(\\D+)(\\d+)/, \"$1 $2\")\r\n        const levelNameText1 = this.add.bitmapText(10, 10, 'gothic', levelName, 48).setDepth(5);\r\n        const levelNameText2 = this.add.bitmapText(levelNameText1.x + 6, levelNameText1.y + 6, 'gothic', levelName, 48).setDepth(4);\r\n        levelNameText1.setTint(0xffffff);\r\n        levelNameText2.setTint(0x000000);\r\n\r\n        const moves = \"Moves: \" + this.moves;\r\n        this.movesText1 = this.add.bitmapText(10, 200, 'gothic', moves, 41).setDepth(5);\r\n        this.movesText2 = this.add.bitmapText(this.movesText1.x + 5, this.movesText1.y + 5, 'gothic', moves, 41).setDepth(4);\r\n        this.movesText1.setTint(0xffffff);\r\n        this.movesText2.setTint(0x000000);\r\n\r\n        const levelNumber = parseInt(this.constructor.name.replace(/(\\D+)(\\d+)/, \"$2\"));\r\n\r\n        const bestScoreKey = `tileswitch_level_${levelNumber}_bestScore`;\r\n\r\n        const bestScoreNum = localStorage.getItem(bestScoreKey)\r\n            ? parseInt(localStorage.getItem(bestScoreKey))\r\n            : 0;\r\n\r\n        this.best = bestScoreNum;\r\n\r\n        const bestScore = \"Best: \" + this.best;\r\n        this.bestScoreText1 = this.add.bitmapText(10, 130, 'gothic', bestScore, 41).setDepth(5);\r\n        this.bestScoreText2 = this.add.bitmapText(this.bestScoreText1.x + 5, this.bestScoreText1.y + 5, 'gothic', bestScore, 41).setDepth(4);\r\n        this.bestScoreText1.setTint(0xffffff);\r\n        this.bestScoreText2.setTint(0x000000);\r\n\r\n        this.drawGrid();\r\n        this.createTileSelector();\r\n\r\n        // Start the fade-in effect\r\n        this.tweens.add({\r\n            targets: this.fadeRect,\r\n            alpha: 0,\r\n            duration: 250,\r\n            onComplete: () => {\r\n                this.fadeRect.destroy(); // Remove the rectangle after the fade-in\r\n            }\r\n        });\r\n\r\n        const levelSelectionButton = this.add.image(this.sys.canvas.width, 0, \"levels\")\r\n            .setDepth(4)\r\n            .setOrigin(1, 0)\r\n            .setScale(0.5)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                this.scene.start('LevelSelection'); // Replace 'HomeScene' with your actual scene key\r\n            });\r\n\r\n        const restartButton = this.add.image(this.sys.canvas.width, 190, \"restart-button\")\r\n            .setDepth(4)\r\n            .setOrigin(1, 0)\r\n            .setScale(0.5)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                this.scene.restart(); // Restarts the current scene\r\n            });\r\n\r\n        for (let x = 0; x < 2; x++) {\r\n            this.hearts[x] = [];\r\n            for (let y = 0; y < 4; y++) {\r\n                this.hearts[x][y] = this.add.image(680 + (x * 64), 36 + y * 64, \"heart\")\r\n                    .setDepth(4)\r\n                    .setOrigin(1, 0);\r\n            }\r\n        }\r\n\r\n        if (this.hearts2) {\r\n            for (let x = 0; x < 2; x++) {\r\n                this.hearts2[x] = [];\r\n                for (let y = 0; y < 4; y++) {\r\n                    this.hearts2[x][y] = this.add.image(680 + (x * 64), 36 + y * 64, \"heart2\")\r\n                        .setDepth(4)\r\n                        .setOrigin(1, 0)\r\n                }\r\n            }\r\n        }\r\n\r\n        this.currentTrophy = this.add.image(this.sys.canvas.width - 10, 110, \"gold-trophy\")\r\n            .setDepth(4)\r\n            .setOrigin(1, 0)\r\n    }\r\n\r\n    addColorTile(x, y, key) {\r\n        this.tiles[x][y].setTexture(key).setVisible(true).setDepth(1);\r\n        this.colorTiles.push({ x, y, key });\r\n    }\r\n\r\n    removeAllColorTiles() {\r\n        for (const colorTile of this.colorTiles) {\r\n            const { x, y } = colorTile;\r\n            this.tiles[x][y].setTexture(\"hover-outline\");\r\n        }\r\n        this.colorTiles = []; // Clear the colorTiles array\r\n    }\r\n\r\n    addPattern(tilesPattern, x = 0, y = 0, scale = 1) {\r\n        this.tilesPattern.push(tilesPattern);\r\n        // Create a new container for the tiles\r\n        this.tileContainer.push(this.add.container(96 * tilesPattern.length, 96 * tilesPattern.length).setDepth(5).setPosition(335 + x, 145 + y).setScale(scale));\r\n\r\n        // Create the three tiles and add them to the container\r\n        for (const [i, tileObj] of tilesPattern.entries()) {\r\n            if (tileObj.hasOwnProperty('type')) {\r\n                if (tileObj.type) {\r\n                    const tile = this.add.image((96 * i), 0, tileObj.texture);\r\n                    const quantity = this.add.text((96 * i) - 15, -25, tileObj.quantity, {\r\n                        fontFamily: \"Arial\",\r\n                        color: \"black\",\r\n                        fontSize: 48,\r\n                    });\r\n                    this.tileContainer[(this.tileContainer.length - 1)].add(tile);\r\n                    this.tileContainer[(this.tileContainer.length - 1)].add(quantity);\r\n                }\r\n            } else {\r\n                const tile = this.add.image((96 * i), 0, tileObj);\r\n                this.tileContainer[(this.tileContainer.length - 1)].add(tile);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    addVerticalPattern(tilesPattern, x = 0, y = 0, scale = 1) {\r\n        this.tilesPattern.push(tilesPattern);\r\n        tilesPattern = tilesPattern.array;\r\n        // Create a new container for the tiles\r\n        this.tileContainer.push(this.add.container(96 * tilesPattern.length, 96 * tilesPattern.length).setDepth(5).setPosition(335 + x, 145 + y).setScale(scale));\r\n\r\n        // Create the three tiles and add them to the container\r\n        for (const [i, tileObj] of tilesPattern.entries()) {\r\n            if (tileObj.hasOwnProperty('type')) {\r\n                if (tileObj.type) {\r\n                    const tile = this.add.image(0, (96 * i), tileObj.texture);\r\n                    const quantity = this.add.text(0 - 15, (96 * i) - 25, tileObj.quantity, {\r\n                        fontFamily: \"Arial\",\r\n                        color: \"black\",\r\n                        fontSize: 48,\r\n                    });\r\n                    this.tileContainer[(this.tileContainer.length - 1)].add(tile);\r\n                    this.tileContainer[(this.tileContainer.length - 1)].add(quantity);\r\n                }\r\n            } else {\r\n                const tile = this.add.image(0, (96 * i), tileObj);\r\n                this.tileContainer[(this.tileContainer.length - 1)].add(tile);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    createTileSelector() {\r\n        // Create the highlight image and hide it initially\r\n        this.tileSelector = this.add.image(0, 0, \"tile-outline\")\r\n            .setOrigin(0, 0)\r\n            .setVisible(false).setDepth(3); // Hide initially\r\n\r\n\r\n        // Set up an event listener for mouse movement\r\n        this.input.on(\"pointerdown\", (pointer) => {\r\n            if (this.levelFinalization)\r\n                return\r\n            if (this.isAnimating)\r\n                return;\r\n            const { x, y } = pointer;\r\n            const tileIndexX = Math.floor(x / this.tileSize);\r\n            const tileIndexY = Math.floor(y / this.tileSize);\r\n            if (this.ctrlKey.isDown) {\r\n                console.log(\"[\" + tileIndexX + \"][\" + (tileIndexY - 3) + \"]\");\r\n            }\r\n            if (this.tiles[tileIndexX][tileIndexY - 3] == null) {\r\n                return;\r\n            }\r\n            if (this.firstTile != null) {\r\n                const tileIndexXFirstTile = Math.floor(this.firstTile.x / this.tileSize);\r\n                const tileIndexYFirstTile = Math.floor(this.firstTile.y / this.tileSize);\r\n                const tileIndexXPointer = Math.floor(pointer.x / this.tileSize);\r\n                const tileIndexYPointer = Math.floor(pointer.y / this.tileSize);\r\n                if (tileIndexXFirstTile == tileIndexXPointer && tileIndexYFirstTile == tileIndexYPointer) {\r\n                    this.tileSelector.setVisible(false);\r\n                    this.firstTile = null; // Reset after swap\r\n                    this.secondTile = null; // Reset after swap\r\n                    return;\r\n                }\r\n            }\r\n            if (this.isSwapingTileA || this.isSwapingTileB)\r\n                return;\r\n            this.tileSelector.setVisible(true);\r\n            if (tileIndexY > 2) {\r\n                const selectedTile = this.tiles[tileIndexX][tileIndexY - 3];\r\n\r\n                if (this.firstTile === null) {\r\n                    // Select the first tile\r\n                    this.firstTile = selectedTile;\r\n                    this.tileSelector.setPosition(selectedTile.x, selectedTile.y);\r\n                    this.tileSelector.setVisible(true);\r\n                    this.sound.add('switch2').play({ volume: 0.5 });\r\n                } else if (this.secondTile === null && selectedTile !== this.firstTile) {\r\n                    // Select the second tile and swap with the first\r\n                    this.secondTile = selectedTile;\r\n                    if (this.firstTile.texture.key === \"tile-rock\" || this.secondTile.texture.key === \"tile-rock\") {\r\n                        if (this.firstTile.texture.key === \"hover-outline\" || this.secondTile.texture.key === \"hover-outline\") {\r\n                            this.swapTiles(this.firstTile, this.secondTile);\r\n                        } else {\r\n                            this.sound.add('invalidMovement').play({ volume: 0.6 });\r\n                            // Shake the tile-rock\r\n                            this.isAnimating = true;\r\n                            let tileRock = this.firstTile.texture.key === \"tile-rock\" ? this.firstTile : this.secondTile;\r\n                            this.tweens.add({\r\n                                targets: tileRock,\r\n                                x: tileRock.x + 5,\r\n                                y: tileRock.y + 5,\r\n                                yoyo: true, // Go back to the original position\r\n                                repeat: 3, // Number of shakes\r\n                                duration: 50, // Duration of each shake\r\n                                onComplete: () => {\r\n                                    tileRock.x = Math.round(tileRock.x);\r\n                                    tileRock.y = Math.round(tileRock.y);\r\n                                    this.isAnimating = false;\r\n                                }\r\n                            });\r\n                        }\r\n                        this.tileSelector.setVisible(false);\r\n                        this.firstTile = null;\r\n                        this.secondTile = null;\r\n                        return;\r\n                    }\r\n                    this.swapTiles(this.firstTile, this.secondTile);\r\n                    this.tileSelector.setVisible(false);\r\n                    this.firstTile = null; // Reset after swap\r\n                    this.secondTile = null; // Reset after swap\r\n                }\r\n            } else {\r\n                this.tileSelector.setVisible(false);\r\n                this.firstTile = null; // Reset after swap\r\n                this.secondTile = null; // Reset after swap\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    swapTiles(tileA, tileB) {\r\n        this.completedSwap = false;\r\n        // Store the original positions\r\n        const originalPositionA = { x: tileA.x, y: tileA.y };\r\n        const originalPositionB = { x: tileB.x, y: tileB.y };\r\n        const textureTileA = tileA.texture.key;\r\n        const textureTileB = tileB.texture.key;\r\n        if (textureTileA == \"hover-outline\" && textureTileB == \"hover-outline\")\r\n            return;\r\n\r\n        this.isSwapingTileA = true;\r\n        this.isSwapingTileB = true;\r\n\r\n        // Tween for tile A moving to tile B's position\r\n        let backgroundAuxTileA = null;\r\n        let backgroundAuxTileB = null;\r\n        if (textureTileA == \"hover-outline\") {\r\n            backgroundAuxTileA = this.add.image(originalPositionA.x, originalPositionA.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n            backgroundAuxTileB = this.add.image(originalPositionB.x, originalPositionB.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n            tileA.setVisible(false);\r\n        } else if (textureTileA != \"hover-outline\" && textureTileB != \"hover-outline\") {\r\n            backgroundAuxTileA = this.add.image(originalPositionA.x, originalPositionA.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n        }\r\n        tileA.setDepth(2);\r\n        tileB.setDepth(2);\r\n        this.tweens.add({\r\n            targets: tileA,\r\n            x: originalPositionB.x,\r\n            y: originalPositionB.y,\r\n            duration: 300,\r\n            ease: 'Power1',\r\n            onComplete: () => {\r\n                if (textureTileA == \"hover-outline\") {\r\n                    backgroundAuxTileA.destroy();\r\n                    backgroundAuxTileB.destroy();\r\n                } else if (textureTileA != \"hover-outline\" && textureTileB != \"hover-outline\") {\r\n                    backgroundAuxTileA.destroy();\r\n                }\r\n                tileA.setTexture(textureTileB).setDepth(2);\r\n                tileA.setPosition(originalPositionA.x, originalPositionA.y);\r\n                tileA.setVisible(true);\r\n                tileA.setDepth(1);\r\n                this.isSwapingTileA = false;\r\n                if (!this.isSwapingTileA && !this.isSwapingTileB && !this.completedSwap) {\r\n                    this.completedSwap = true;\r\n                    this.onSwapComplete(tileA, tileB);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Tween for tile B moving to tile A's position\r\n        let backgroundAuxTileA2 = null;\r\n        let backgroundAuxTileB2 = null;\r\n        if (textureTileB == \"hover-outline\") {\r\n            backgroundAuxTileA2 = this.add.image(originalPositionA.x, originalPositionA.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n            backgroundAuxTileB2 = this.add.image(originalPositionB.x, originalPositionB.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n            tileB.setVisible(false);\r\n        } else if (textureTileA != \"hover-outline\" && textureTileB != \"hover-outline\") {\r\n            backgroundAuxTileB2 = this.add.image(originalPositionB.x, originalPositionB.y, \"hover-outline\")\r\n                .setOrigin(0, 0).setDepth(0);\r\n        }\r\n        this.tweens.add({\r\n            targets: tileB,\r\n            x: originalPositionA.x,\r\n            y: originalPositionA.y,\r\n            duration: 300,\r\n            ease: 'Power1',\r\n            onComplete: () => {\r\n                if (textureTileB == \"hover-outline\") {\r\n                    backgroundAuxTileA2.destroy();\r\n                    backgroundAuxTileB2.destroy();\r\n                } else if (textureTileA != \"hover-outline\" && textureTileB != \"hover-outline\") {\r\n                    backgroundAuxTileB2.destroy();\r\n                }\r\n                tileB.setTexture(textureTileA).setDepth(2);\r\n                tileB.setPosition(originalPositionB.x, originalPositionB.y);\r\n                tileB.setVisible(true);\r\n                tileB.setDepth(1);\r\n                this.isSwapingTileB = false;\r\n                if (!this.isSwapingTileA && !this.isSwapingTileB && !this.completedSwap) {\r\n                    this.completedSwap = true;\r\n                    this.onSwapComplete(tileA, tileB);\r\n                }\r\n            }\r\n        });\r\n        this.sound.add('switch').play({ volume: 0.4 });\r\n    }\r\n\r\n    onSwapComplete(tileA, tileB) {\r\n        const tileIndexXA = Math.floor(tileA.x / this.tileSize);\r\n        const tileIndexYA = Math.floor(tileA.y / this.tileSize);\r\n        const tileIndexXB = Math.floor(tileB.x / this.tileSize);\r\n        const tileIndexYB = Math.floor(tileB.y / this.tileSize);\r\n        const textureTileA = tileA.texture.key;\r\n        const textureTileB = tileB.texture.key;\r\n\r\n        let indexTileA = this.colorTiles.findIndex(object => object.key === textureTileB && object.x === tileIndexXA && object.y === (tileIndexYA - 3));\r\n        let indexTileB = this.colorTiles.findIndex(object => object.key === textureTileA && object.x === tileIndexXB && object.y === (tileIndexYB - 3));\r\n\r\n        if (indexTileA) {\r\n            if (indexTileA != -1) {\r\n                this.colorTiles[indexTileA].x = tileIndexXB;\r\n                this.colorTiles[indexTileA].y = (tileIndexYB - 3);\r\n            }\r\n            if (indexTileB != -1) {\r\n                this.colorTiles[indexTileB].x = tileIndexXA;\r\n                this.colorTiles[indexTileB].y = (tileIndexYA - 3);\r\n            }\r\n        }\r\n        if (indexTileB) {\r\n            if (indexTileA != -1) {\r\n                this.colorTiles[indexTileA].x = tileIndexXB;\r\n                this.colorTiles[indexTileA].y = (tileIndexYB - 3);\r\n            }\r\n            if (indexTileB != -1) {\r\n                this.colorTiles[indexTileB].x = tileIndexXA;\r\n                this.colorTiles[indexTileB].y = (tileIndexYA - 3);\r\n            }\r\n        }\r\n\r\n        this.moves++;\r\n        const moves = \"Moves: \" + this.moves;\r\n        this.movesText1.setText(moves);\r\n        this.movesText2.setText(moves);\r\n\r\n        this.removeOneLife();\r\n        this.verifyTilesInPattern();\r\n    }\r\n\r\n    removeOneLife() {\r\n        let lastHeart = null;\r\n\r\n        if (this.hearts2 && this.hearts2[1].length) {\r\n            lastHeart = this.hearts2[1].pop();\r\n        } else if (this.hearts2 && this.hearts2[0].length > 0) {\r\n            lastHeart = this.hearts2[0].pop();\r\n        } else if (this.hearts[1].length) {\r\n            lastHeart = this.hearts[1].pop();\r\n        } else if (this.hearts[0].length > 1) {\r\n            lastHeart = this.hearts[0].pop();\r\n        } else {\r\n            if (!this.verifyTilesInPattern()) {\r\n                this.scene.restart();\r\n            }\r\n            return;\r\n        }\r\n        lastHeart.destroy();\r\n        if (this.moves > this.goldTrophy) {\r\n            this.currentTrophy.setTexture(\"silver-trophy\").setVisible(true).setDepth(1);\r\n        }\r\n        if (this.moves >= this.bronzeTrophy) {\r\n            this.currentTrophy.setTexture(\"bronze-trophy\").setVisible(true).setDepth(1);\r\n        }\r\n    }\r\n\r\n    drawGrid() {\r\n        const baseTileSize = 16; // Original tile size (without scaling)\r\n\r\n        // Calculate tileScale to fit tiles in the screen width\r\n        const tileScale = this.sys.canvas.width / (Math.ceil(this.sys.canvas.width / (baseTileSize * 6)) * baseTileSize);\r\n\r\n        // Calculate tile size after scaling\r\n        this.tileSize = (baseTileSize * tileScale);\r\n\r\n        // Calculate number of tiles needed to cover the screen\r\n        this.numTilesH = Math.ceil(this.sys.canvas.width / this.tileSize);\r\n        this.numTilesV = Math.ceil(this.sys.canvas.height / this.tileSize);\r\n\r\n        // Initialize the tiles 2D array with empty arrays for each column\r\n        for (let x = 0; x < this.numTilesH; x++) {\r\n            this.tiles[x] = [];\r\n        }\r\n    }\r\n\r\n    drawEmptyTiles(firstCoord, lastCoord) {\r\n        for (let x = firstCoord.x; x <= lastCoord.x; x++) {\r\n            for (let y = firstCoord.y + 3; y <= lastCoord.y + 3; y++) {\r\n                if (this.tiles[x][y - 3] == null) {\r\n                    const tile = this.add.image(x * this.tileSize, y * this.tileSize, \"hover-outline\")\r\n                        .setOrigin(0, 0).setDepth(1);\r\n                    // Store the tile in the 2D array\r\n                    this.tiles[x][y - 3] = tile;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawEmptyTilesAllBoard() {\r\n        for (let x = 0; x < this.numTilesH; x++) {\r\n            for (let y = 3; y < this.numTilesV; y++) {\r\n                const tile = this.add.image(x * this.tileSize, y * this.tileSize, \"hover-outline\")\r\n                    .setOrigin(0, 0).setDepth(1);\r\n\r\n                // Store the tile in the 2D array\r\n                this.tiles[x][y - 3] = tile;\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEmptyTiles(firstCoord, lastCoord) {\r\n        for (let x = firstCoord.x; x <= lastCoord.x; x++) {\r\n            for (let y = firstCoord.y + 3; y <= lastCoord.y + 3; y++) {\r\n                if (this.tiles[x][y - 3] != null) {\r\n                    this.tiles[x][y - 3].destroy();\r\n                    delete this.tiles[x][y - 3];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeAllTiles() {\r\n        for (let x = 0; x < this.numTilesH; x++) {\r\n            for (let y = 3; y < this.numTilesV; y++) {\r\n                if (this.tiles[x][y - 3] != null) {\r\n                    this.tiles[x][y - 3].destroy();\r\n                    delete this.tiles[x][y - 3];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    update() { }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/LevelScene.js?");

/***/ }),

/***/ "./src/scenes/LevelSelection.js":
/*!**************************************!*\
  !*** ./src/scenes/LevelSelection.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LevelSelection)\n/* harmony export */ });\n/* harmony import */ var _Main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Main.js */ \"./src/Main.js\");\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\n\r\nclass LevelSelection extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor() {\r\n        super(\"LevelSelection\");\r\n    }\r\n\r\n    getTrophies(levelName) {\r\n        const trophies = {};\r\n        const level = _Main_js__WEBPACK_IMPORTED_MODULE_0__.config.scene.find(scene => scene.name === levelName);\r\n        const instance = new level();\r\n        trophies[level.name] = {\r\n            goldTrophy: instance.goldTrophy || 0,\r\n            bronzeTrophy: instance.bronzeTrophy || 0,\r\n        };\r\n        return trophies;\r\n    }\r\n\r\n    create() {\r\n        this.moves = 0;\r\n        this.tilesPattern = [];\r\n        this.tileContainer = [];\r\n        this.tiles = [];\r\n        this.colorTiles = [];\r\n        this.firstTile = null; // Track the first tile selected\r\n        this.secondTile = null; // Track the second tile selected\r\n        this.fadeRect = this.add.rectangle(0, 0, this.cameras.main.width, this.cameras.main.height, 0x000000, 0.5);\r\n        this.fadeRect.setOrigin(0, 0);\r\n        this.fadeRect.setDepth(1000); // Ensure the rectangle is on top\r\n        this.drawGrid();\r\n        for (let x = 0; x < this.numTilesH; x++) {\r\n            for (let y = 0; y < this.numTilesV; y++) {\r\n                const tile = this.add.image(x * this.tileSize, y * this.tileSize, \"hover-outline\")\r\n                    .setOrigin(0, 0).setDepth(1);\r\n\r\n                // Store the tile in the 2D array\r\n                this.tiles[x][y] = tile;\r\n            }\r\n        }\r\n        this.addColorTile(1, 1, \"tile-yellow\");\r\n        this.addColorTile(1, 12, \"tile-red\");\r\n        this.addColorTile(7, 6, \"tile-blue\");\r\n\r\n        const homeButton = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY - 600, \"home-button\")\r\n            .setDepth(1001)\r\n            .setOrigin(0.5, 0.5)\r\n            .setScale(1)\r\n            .setInteractive()\r\n            .on('pointerdown', () => {\r\n                this.sound.add('switch2').play({ volume: 0.5 });\r\n                this.scene.start('MainMenu'); // Replace 'HomeScene' with your actual scene key\r\n            });\r\n\r\n        const lastLevel = localStorage.getItem('tileswitch_lastLevel') ? parseInt(localStorage.getItem('tileswitch_lastLevel')) : 1;\r\n\r\n        const levelsPerRow = 5; // Number of levels per row\r\n        const totalLevels = 20; // Total levels\r\n        const buttonSize = 160; // Spacing between buttons\r\n        const startX = 40; // Starting X position\r\n        const startY = 350; // Starting Y position\r\n        const rowSpacing = 200; // Spacing between rows\r\n\r\n        for (let index = 0; index < totalLevels; index++) {\r\n            const row = Math.floor(index / levelsPerRow); // Calculate the row\r\n            const col = index % levelsPerRow; // Calculate the column\r\n\r\n            const levelButton = this.add.image(\r\n                startX + col * buttonSize,\r\n                startY + row * rowSpacing,\r\n                \"level\" + (index + 1)// Assuming \"level1\", \"level2\", etc., are the button images\r\n            )\r\n                .setDepth(1001)\r\n                .setScale(0.3)\r\n                .setOrigin(0, 0)\r\n                .setInteractive();\r\n\r\n            const levelIndex = index + 1; // Levels are 1-based\r\n            if (levelIndex <= lastLevel) {\r\n                // Accessible level\r\n                levelButton.on('pointerdown', () => {\r\n                    this.sound.add('switch2').play({ volume: 0.5 });\r\n                    this.scene.start(\"Level\" + levelIndex); // Navigate to corresponding level\r\n                });\r\n\r\n                levelButton.on('pointerover', () => {\r\n                    levelButton.setAlpha(0.8); // Change opacity on hover\r\n                });\r\n\r\n                levelButton.on('pointerout', () => {\r\n                    levelButton.setAlpha(1); // Restore opacity when not hovering\r\n                });\r\n\r\n                const levelNumber = levelIndex;\r\n\r\n                const bestScoreKey = `tileswitch_level_${levelNumber}_bestScore`;\r\n\r\n                const bestScoreNum = localStorage.getItem(bestScoreKey)\r\n                    ? parseInt(localStorage.getItem(bestScoreKey))\r\n                    : 0;\r\n\r\n                if (bestScoreNum) {\r\n\r\n                    const allTrophies = this.getTrophies(\"Level\" + levelIndex);\r\n                    if (allTrophies[\"Level\" + levelIndex].goldTrophy >= bestScoreNum) {\r\n                        this.currentTrophy = this.add.image(startX + col * buttonSize + 60,\r\n                            startY + row * rowSpacing + 110, \"gold-trophy\")\r\n                            .setDepth(4)\r\n                            .setOrigin(0.5, 0.5)\r\n                            .setDepth(1001)\r\n                    } else if (allTrophies[\"Level\" + levelIndex].bronzeTrophy <= bestScoreNum) {\r\n                        this.currentTrophy = this.add.image(startX + col * buttonSize + 60,\r\n                            startY + row * rowSpacing + 110, \"bronze-trophy\")\r\n                            .setDepth(4)\r\n                            .setOrigin(0.5, 0.5)\r\n                            .setDepth(1001)\r\n                    } else {\r\n                        this.currentTrophy = this.add.image(startX + col * buttonSize + 60,\r\n                            startY + row * rowSpacing + 110, \"silver-trophy\")\r\n                            .setDepth(4)\r\n                            .setOrigin(0.5, 0.5)\r\n                            .setDepth(1001)\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n            } else {\r\n                // Inaccessible level\r\n                levelButton.setTint(0x808080); // Paint gray for inaccessible levels\r\n                levelButton.setInteractive(false); // Disable interaction\r\n            }\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/LevelSelection.js?");

/***/ }),

/***/ "./src/scenes/LoadingScene.js":
/*!************************************!*\
  !*** ./src/scenes/LoadingScene.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LoadingScene)\n/* harmony export */ });\nclass LoadingScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: \"LoadingScene\"\r\n        })\r\n    }\r\n\r\n    preload() {\r\n        this.load.image('thumbnail', 'images/thumbnailv3.png');\r\n\r\n        this.cameras.main.setBackgroundColor(0x000000);\r\n\r\n        const screenWidth = this.sys.canvas.width;\r\n        const screenHeight = this.sys.canvas.height;\r\n        const barWidth = screenWidth * 0.8;\r\n        const barHeight = 40;\r\n        const barX = (screenWidth - barWidth) / 2;\r\n        const barY = screenHeight / 2 - barHeight / 2;\r\n\r\n        const loadingBar = this.add.graphics();\r\n        const outlineBar = this.add.graphics();\r\n        outlineBar.lineStyle(2, 0xffffff, 1);  // Outline color and thickness\r\n        outlineBar.strokeRect(barX, barY, barWidth, barHeight);\r\n\r\n        this.load.once('filecomplete-image-thumbnail', () => {\r\n            // Add the game thumbnail once it's loaded\r\n            this.thumbnail = this.add.image(screenWidth / 2, barY - 180, \"thumbnail\");\r\n        });\r\n\r\n        this.load.on('progress', (percentage) => {\r\n            loadingBar.fillStyle(0xffffff, 1);\r\n            loadingBar.fillRect(barX, barY, barWidth * percentage, barHeight);\r\n        });\r\n\r\n        this.load.on('complete', () => {\r\n            loadingBar.destroy();\r\n            this.scene.start(\"MainMenu\");\r\n        });\r\n        \r\n        \r\n        this.load.image('hover-outline', 'images/hover-outline.png');\r\n        this.load.image('tile-outline', 'images/tile-outline.png');\r\n        this.load.image(\"top-panel\", 'images/top-panel.png');\r\n        this.load.image(\"tile-blue\", 'images/tile-blue.png');\r\n        this.load.image(\"tile-green\", 'images/tile-green.png');\r\n        this.load.image(\"tile-yellow\", 'images/tile-yellow.png');\r\n        this.load.image(\"tile-red\", 'images/tile-red.png');\r\n        this.load.image(\"tile-black\", 'images/tile-black.png');\r\n        this.load.image(\"tile-joker\", 'images/tile-joker.png');\r\n        this.load.image(\"tile-rock\", 'images/tile-rock.png');\r\n        this.load.image(\"game-logo\", 'images/game-logo.png');\r\n        this.load.image(\"play-button\", 'images/play-button.png');\r\n        this.load.image(\"credits-button\", 'images/credits-button.png');\r\n        this.load.image(\"top-panel-wood\", 'images/top-panel-wood.png');\r\n        this.load.audio('winlevel', 'sounds/winlevel.wav');\r\n        this.load.audio('switch', 'sounds/switch.wav');\r\n        this.load.audio('switch2', 'sounds/switch2.wav');\r\n        this.load.audio('invalidMovement', 'sounds/invalidMovement.wav');\r\n\r\n        this.load.image(\"levelfinalizationpanel\", 'images/levelfinalizationpanel.png');\r\n        this.load.image(\"restart-button\", 'images/Buttons/Restartv2.png');\r\n        this.load.image(\"home-button\", 'images/Buttons/home.png');\r\n        this.load.image(\"next-level\", 'images/Buttons/next-level.png');\r\n        this.load.image(\"levels\", 'images/Buttons/Levels.png');\r\n        \r\n        this.load.image(\"heart\", 'images/heart.png');\r\n        this.load.image(\"heart2\", 'images/heart2.png');\r\n        this.load.image(\"bronze-trophy\", 'images/bronze-trophy.png');\r\n        this.load.image(\"silver-trophy\", 'images/silver-trophy.png');\r\n        this.load.image(\"gold-trophy\", 'images/gold-trophy.png');\r\n\r\n        for (let index = 0; index < 20; index++) {\r\n            this.load.image(\"level\" + (index + 1), 'images/' + \"level\" + (index + 1) + '.png');\r\n        }\r\n\r\n        this.load.bitmapFont('gothic', 'fonts/gothic.png', 'fonts/gothic.xml');\r\n\r\n        this.load.spritesheet('tile-correct', 'images/tile-correct.png', {\r\n            frameWidth: 96,\r\n            frameHeight: 96\r\n        });\r\n    }\r\n\r\n    create() {\r\n        this.anims.create({\r\n            key: 'tile-correct-dashed',\r\n            frames: [\r\n                { key: 'tile-correct', frame: 0 },\r\n                { key: 'tile-correct', frame: 1 }\r\n            ],\r\n            frameRate: 2,\r\n            repeat: -1 // Loop indefinitely\r\n        });\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/LoadingScene.js?");

/***/ }),

/***/ "./src/scenes/MainMenu.js":
/*!********************************!*\
  !*** ./src/scenes/MainMenu.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MainMenu)\n/* harmony export */ });\n/* harmony import */ var _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LevelScene.js */ \"./src/scenes/LevelScene.js\");\n\r\n\r\nclass MainMenu extends _LevelScene_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor() {\r\n        super(\"MainMenu\");\r\n    }\r\n\r\n    create() {\r\n        this.creditsVisible = false;\r\n        this.moves = 0;\r\n        this.tilesPattern = [];\r\n        this.tileContainer = [];\r\n        this.tiles = [];\r\n        this.colorTiles = [];\r\n        this.firstTile = null; // Track the first tile selected\r\n        this.secondTile = null; // Track the second tile selected\r\n        this.fadeRect = this.add.rectangle(0, 0, this.cameras.main.width, this.cameras.main.height, 0x000000, 0.5);\r\n        this.fadeRect.setOrigin(0, 0);\r\n        this.fadeRect.setDepth(1000); // Ensure the rectangle is on top\r\n        this.drawGrid();\r\n        for (let x = 0; x < this.numTilesH; x++) {\r\n            for (let y = 0; y < this.numTilesV; y++) {\r\n                const tile = this.add.image(x * this.tileSize, y * this.tileSize, \"hover-outline\")\r\n                    .setOrigin(0, 0).setDepth(1);\r\n\r\n                // Store the tile in the 2D array\r\n                this.tiles[x][y] = tile;\r\n            }\r\n        }\r\n        this.addColorTile(1, 1, \"tile-yellow\");\r\n        this.addColorTile(1, 12, \"tile-red\");\r\n        this.addColorTile(7, 6, \"tile-blue\");\r\n\r\n        const logo = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY - 200, \"game-logo\")\r\n            .setDepth(1001)\r\n            .setScale(0.4)\r\n            .setOrigin(0.5, 0.5);\r\n\r\n        const playButton = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY + 100, \"play-button\")\r\n            .setDepth(1001)\r\n            .setScale(0.4)\r\n            .setOrigin(0.5, 0.5)\r\n            .setInteractive();\r\n\r\n        const creditsButton = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY + 260, \"credits-button\")\r\n            .setDepth(1001)\r\n            .setScale(0.4)\r\n            .setOrigin(0.5, 0.5)\r\n            .setInteractive();\r\n\r\n        // Add click event for the play button\r\n        playButton.on('pointerdown', () => {\r\n            this.sound.add('switch2').play({ volume: 0.5 });\r\n            this.scene.start('LevelSelection'); // Navigate to Level1 scene\r\n        });\r\n\r\n        creditsButton.on('pointerdown', () => {\r\n            this.sound.add('switch2').play({ volume: 0.5 });\r\n            if (this.creditsVisible) {\r\n                // Destroy all credits-related elements\r\n                this.creditsPanel.destroy();\r\n                this.creditsText.destroy();\r\n                this.creditsTextShadow.destroy();\r\n                this.creditsText2.destroy();\r\n                this.creditsTextShadow2.destroy();\r\n                this.creditsText3.destroy();\r\n                this.creditsTextShadow3.destroy();\r\n                this.creditsText4.destroy();\r\n                this.creditsTextShadow4.destroy();\r\n                this.creditsOverlay.destroy();\r\n                this.creditsVisible = false; // Update visibility flag\r\n            } else {\r\n                // Add the credits panel and text\r\n                this.creditsPanel = this.add.image(this.cameras.main.centerX, this.cameras.main.centerY + 550, \"top-panel-wood\")\r\n                    .setDepth(1001)\r\n                    .setScale(1.5);\r\n        \r\n                this.creditsText = this.add.bitmapText(this.cameras.main.centerX, this.cameras.main.centerY + 450, 'gothic', \"Developed By\", 38)\r\n                    .setOrigin(0.5, 0.5)\r\n                    .setDepth(1002);\r\n        \r\n                this.creditsTextShadow = this.add.bitmapText(this.creditsText.x + 5, this.creditsText.y + 5, 'gothic', this.creditsText.text, 38).setOrigin(0.5, 0.5).setDepth(1001).setTint(0x000000);\r\n        \r\n                this.creditsText2 = this.add.bitmapText(this.cameras.main.centerX, this.cameras.main.centerY + 500, 'gothic', \"SchaukoskiEntertainment\", 38)\r\n                    .setOrigin(0.5, 0.5)\r\n                    .setDepth(1002);\r\n        \r\n                this.creditsTextShadow2 = this.add.bitmapText(this.creditsText2.x + 5, this.creditsText2.y + 5, 'gothic', this.creditsText2.text, 38).setOrigin(0.5, 0.5).setDepth(1001).setTint(0x000000);\r\n        \r\n                this.creditsText3 = this.add.bitmapText(this.cameras.main.centerX, this.cameras.main.centerY + 600, 'gothic', \"Interface Assets\", 38)\r\n                    .setOrigin(0.5, 0.5)\r\n                    .setDepth(1002);\r\n        \r\n                this.creditsTextShadow3 = this.add.bitmapText(this.creditsText3.x + 5, this.creditsText3.y + 5, 'gothic', this.creditsText3.text, 38).setOrigin(0.5, 0.5).setDepth(1001).setTint(0x000000);\r\n        \r\n                this.creditsText4 = this.add.bitmapText(this.cameras.main.centerX, this.cameras.main.centerY + 650, 'gothic', \"Mounir Tohami\", 38)\r\n                    .setOrigin(0.5, 0.5)\r\n                    .setDepth(1002);\r\n        \r\n                this.creditsTextShadow4 = this.add.bitmapText(this.creditsText4.x + 5, this.creditsText4.y + 5, 'gothic', this.creditsText4.text, 38).setOrigin(0.5, 0.5).setDepth(1001).setTint(0x000000);\r\n        \r\n                // Add an invisible overlay to detect clicks\r\n                this.creditsOverlay = this.add.rectangle(0, 0, this.cameras.main.width, this.cameras.main.height, 0x000000, 0)\r\n                    .setOrigin(0, 0)\r\n                    .setDepth(1000)\r\n                    .setInteractive();\r\n        \r\n                // Handle click on overlay to close the credits\r\n                this.creditsOverlay.on('pointerdown', () => {\r\n                    this.creditsPanel.destroy();\r\n                    this.creditsText.destroy();\r\n                    this.creditsTextShadow.destroy();\r\n                    this.creditsText2.destroy();\r\n                    this.creditsTextShadow2.destroy();\r\n                    this.creditsText3.destroy();\r\n                    this.creditsTextShadow3.destroy();\r\n                    this.creditsText4.destroy();\r\n                    this.creditsTextShadow4.destroy();\r\n                    this.creditsOverlay.destroy();\r\n                    this.creditsVisible = false;\r\n                });\r\n        \r\n                this.creditsVisible = true; // Update visibility flag\r\n            }\r\n        });\r\n        \r\n\r\n        // Add a tween to make the logo rotate left and right\r\n        this.tweens.add({\r\n            targets: logo,\r\n            angle: { from: -4, to: 4 }, // Rotate between -4 and 4 degrees\r\n            duration: 1000, // Duration of one complete cycle (left to right or vice versa)\r\n            ease: 'Sine.easeInOut',\r\n            yoyo: true, // Make the animation reverse after each cycle\r\n            repeat: -1 // Repeat forever\r\n        });\r\n    }\r\n}\n\n//# sourceURL=webpack://tileswitch/./src/scenes/MainMenu.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Main.js");
/******/ 	
/******/ })()
;